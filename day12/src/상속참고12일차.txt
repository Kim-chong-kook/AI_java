
<< 상속에서 일어나는 다형성(Override) >>

*오버로딩 : 단일클래스의 매개변수다른 메소드 작성
*오버라이딩(or 오버라이팅) : 상속에서만, ■다형성, ■메소드 재정의, ■덮어쓰기

*************오버라이딩의 5~8가지 특징***** 다형성 : ■ 재정의 / ■ 덮어쓰기 **********
	final 메소드, static메소드, private 는 상속안됨
	함수선언부에 :  
		- 메소드 매개변수 type 및 리턴 type 일치해야 함. 
		- 인자 이름은 무관 
***************************************************************************
@는 컴파일러의 주석 : 어노테이션
@deprecated : 버전 업시 삭제될 내용.

<<CarTest_Override_상속>>
최상위 Object 까지 올라가서 Override
model 비교하기 위해 우회함.

오버라이드는 동적 힙공간에 배치됨.
@Override 넣기 // 소스/오버라이드/Implement Methods

클래스에서 System.out.println("비오버라이딩"+t.toString()); // 오버라이딩 안했을때, 스택 address 표시.
클래스에서 System.out.println("오버라이딩"+t.toString()); // 오버라이딩 했을때, 구체적 자료 표시

<<형 변환과 메모리>>
Customer vc = new VIPCustomer(); 에서 vc가 가리키는 것은? 
자식 instance가 부모 타입으로 up 캐스팅 됨.
VIPCustomer() 생성자에 의해 VIPCustomer 클래스의 모든 멤버 변수에 대한 메모리는 생성되었지만,
변수의 타입이 Customer 이므로 실제 접근 가능한 변수나 메서드는 부모 Customer의 변수와 메서드임.
따라서, 자식의 디테일한 인스턴스는 못쓰나 쓸려면 다시 Down casting 하거나 Override 해준다.

Customer customerNo = new VIPCustomer(10030, "나몰라"); // ★ 업캐스팅
		// 묵시적 무명자 생성해서 넣음 : Anonymouse anonymoune = new VIPCustomer();
		// 묵시적 형변환 Customer customerNo = (Customer) new VIPCustomer(10030, "나몰라");